#!/usr/bin/env bash
set -eo pipefail

prompt() {
    prompt="${1:-Continue?} (y/n) "
    tput sc
    while true; do
        read -p "$prompt" -n 1 -r yn
        case $yn in
        [YyNn])
            echo "$yn"
            echo "" >/dev/tty
            return 0
            ;;
        *)
            tput el1
            tput rc
            ;;
        esac
    done
}

{
    # Check if there are any changes (unstaged, staged, or untracked)
    if [[ -z $(git status --porcelain) ]]; then
        echo "No changes detected"
        exit 0
    fi

    # Check for untracked files
    if [[ -n $(git ls-files --others --exclude-standard) ]]; then
        untracked=$(git ls-files --others --exclude-standard)
        if [[ -n "$untracked" ]]; then
            echo "Untracked files detected:"
            # Print each file on a separate line (optional: indent for clarity)
            while IFS= read -r file; do
                printf '  %s\n' "$file"
            done <<<"$untracked"
        fi

        answer=$(prompt "Stage all changes including untracked files?")
        if [[ "$answer" =~ [Yy] ]]; then
            echo "All changes (including untracked files) staged."
            git add -A
        else
            git add -u
            echo "Only unstaged changes staged."
        fi
    else
        git add -u
        echo "Only unstaged changes staged (no untracked files present)."
    fi
}

# print changes
changes=$(git diff --cached --name-only)
if [[ -n "$changes" ]]; then
    while IFS= read -r file; do
        printf '  %s\n' "$file"
    done <<<"$changes"
fi

git commit -m "WIP $(date +%s)"

case "$1" in
--np | -np) ;;
*)
    # optionally push depending on if a git remote is set or not
    if git rev-parse --is-inside-work-tree &>/dev/null; then
        echo ""
        if git remote | grep -q .; then
            set -x
            git push -q
        else
            echo "No remotes configured. Omitting Push."
        fi
    fi
    ;;
esac
