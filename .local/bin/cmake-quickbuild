#!/bin/bash
set -eo pipefail

die() {
    printf '%s\n' "$1" >&2
    exit "${2-1}"
}

usage() {
    echo "usage: [-c|--clean] [-d|--debug] [-nr|--no-rebuild] [-r|--release]"
    exit 1
}

prompt_continue() {
    printf "\a" # bell
    tput sc
    while true; do
        read -p "Continue? (y/n) " -n 1 -r yn
        case $yn in
            [Yy]*) break;;
            [Nn]*) printf "\n"; exit 1;;
            *) tput el1; tput rc ;;
        esac
    done
    printf "\n"
}

ProjectDir=$PWD

clean=
debug=
no_rebuild=
release=
while :; do
    case $1 in
        -h|-\?|--help)
            usage; exit ;;
        -c|--clean)
            clean=1
            ;;
        -d|--debug)
            debug=1
            ;;
        -nr|--no-rebuild)
            no_rebuild=1
            ;;
        -r|--release)
            release=1
            ;;
        --)
            shift || usage
            break
            ;;
        -?*) printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2 ;;
        *) break ;;
    esac

    shift || usage
done

if [[ $release ]]; then
    build="build_release"
else 
    build="build"
fi

build() {
    cd "$ProjectDir"
    [[ ! -f "$ProjectDir/CMakeLists.txt" ]] && die "run this in a directory with a CMakeLists.txt"
    [[ ! -d "$ProjectDir/$build" ]] && { mkdir -p "$ProjectDir/$build"; }

    cd "$ProjectDir/$build"
    [[ $debug ]] && debug_arg="-DCMAKE_BUILD_TYPE=Debug"
    [[ $release ]] && release_arg="-DCMAKE_BUILD_TYPE=Release"
    cmake .. -GNinja -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $debug_arg $release_arg $* || { echo "cmake command failed"; rebuild; }
    if [[ $no_rebuild ]]; then
        ninja
    else
        ninja || rebuild $*
    fi

    # link compile_commands.json
    [[ ! -f "$ProjectDir/compile_commands.json" ]] && ln -s "$ProjectDir/$build/compile_commands.json" "$ProjectDir/compile_commands.json" || true

    exit 0
}
rebuild() {
    echo "about to clean the WHOLE build and then rebuild..."
    prompt_continue
    rm -rf "$ProjectDir/$build"
    build $*
}
[[ $clean ]] && { echo "was told to explicitly clean"; rm -rf "$ProjectDir/$build"; } 
build $*
