#!/bin/bash
set -eo pipefail

die() {
    printf '%s\n' "$1" >&2
    exit "${2-1}"
}
usage() {
    prefix_tab() { sed 's/^/\t/'; }
    filter_cases() { sed -rn 's/\s+(.*)\)\s*# \{\{\{2/\1/p' | sort | prefix_tab; }

    source_to_pair_comment_line() { sed -r '/^# \{\{\{1 pair/q'; }
    source_from_pair_comment_line() { sed -r '1,/^# \{\{\{1 pair/d'; }
    echo "usage: <template> | <target> <ft-template>"
    echo "templates:"
    cat "$0" | source_to_pair_comment_line | filter_cases
    echo ""
    echo "ft-templates:"
    cat "$0" | source_from_pair_comment_line | filter_cases

    exit 1
}
usage_and_die() {
    printf '%s\n' "$1" >&2
    usage
}

writtenFiles=()

icat() {
    [[ -f "$1" ]] && {
        echo "$1 already exists"
        sleep 0.4

        exec 0</dev/tty # restore stdin to tty
        "$EDITOR" + "$1"
        return 0
    }
    mkdir -p "$(dirname "$1")" || true
    echo "+ $1"
    writtenFiles+=($1)
    cat > "$1"
}

xicat() {
    icat "$1"
    [[ -f "$1" ]] && chmod +x "$1"
}

# {{{1 single templates
if [[ $# -eq 1 ]]; then
    case "$1" in
        ansible) # {{{2
            icat "Makefile.ansible" <<'EOF'
lint: ## Lint ansible files via ansible-lint (args: ARGS)
	set -x
	ansible-lint --strict --show-relpath --offline --project-dir . ${ARGS}

autoformat:  ## Autoformat all yaml files via 'yamlfmt'
	set -x
	find . -iname "*.yml" \
		-not -path "./subdir/*" -and \
		-not -path "./requirements.yml" \
	| xargs yamlfmt

verify-host-connections: ## Verify local SSH keys being able to connect to hosts
	set -x
	ansible all -m ping -i ./inventory/production.yml
EOF

            icat ".ansible-lint" <<'EOF'
---
use_default_rules: true

exclude_paths:
  - ./requirements.yml
  - ./some/dir/**

# mock_modules:
#   - postgresql_db
#   - postgresql_user
#   - postgresql_privs
#   - postgresql_pg_hba

warn_list:
  - command-instead-of-shell  # Use shell only when shell functionality is required
  - deprecated-local-action   # Do not use 'local_action', use 'delegate_to: localhost'
  - literal-compare           # Don't compare to literal True/False
  - name[play]
  - package-latest            # Package installs should not use latest
  - risky-shell-pipe          # Shells that use pipes should set the pipefail option

skip_list:
  - command-instead-of-shell  # ignore: not worth saving a bunch of seconds or having to noaq legit uses
  - fqcn                      # ignore: see https://github.com/ansible/ansible-lint/issues/2050
  - name[missing]             # ignore: some tasks are self-describing
  - name[template]            # ignore: Jinja templates should only be at the end of 'name'
  - yaml[line-length]         # ignore: not worth the troubles

  - experimental              # @XXX @TODO these fail for unexplained reasons, unsure why, disabling for now
  - package-latest            # @TODO maybe enable again?
  - risky-file-permissions    # @XXX @TODO these fail for unexplained reasons, might be a bug, disabling for now

# vim: set ft=yaml:
EOF

            icat ".yamlfmt" <<'EOF'
---
# for https://github.com/google/yamlfmt
formatter:
  disallow_anchors: true
  include_document_start: true
  indent: 2
  indentless_arrays: false
  line_ending: lf
  pad_line_comments: 2
  retain_line_breaks: true
  scan_folded_as_literal: true
  type: basic

# vim: set ft=yaml:
EOF

            icat ".yamllint" <<'EOF'
---
rules:
  anchors:
    forbid-undeclared-aliases: true
    forbid-duplicated-anchors: true

  braces:
    min-spaces-inside: 0
    max-spaces-inside: 0
    min-spaces-inside-empty: -1
    max-spaces-inside-empty: -1
  brackets:
    min-spaces-inside: 0
    max-spaces-inside: 0
    min-spaces-inside-empty: -1
    max-spaces-inside-empty: -1
  colons:
    max-spaces-before: 0
    max-spaces-after: 1
  commas:
    max-spaces-before: 0
    min-spaces-after: 1
    max-spaces-after: 1

  comments:
    require-starting-space: true
    ignore-shebangs: true
    min-spaces-from-content: 2
  comments-indentation: {}

  document-start:
    present: true

  float-values:
    forbid-inf: true
    forbid-nan: true
    forbid-scientific-notation: true
    require-numeral-before-decimal: true

  empty-lines:
    max: 2
    max-start: 0
    max-end: 0
  empty-values:
    forbid-in-block-mappings: true
    forbid-in-flow-mappings: true

  hyphens:
    max-spaces-after: 1
  indentation:
    check-multi-line-strings: false
    indent-sequences: true
    spaces: 2
  trailing-spaces: {}

  key-duplicates: {}

  octal-values:
    forbid-implicit-octal: true
    forbid-explicit-octal: true

  truthy:
    allowed-values: ['true', 'false', 'yes', 'no']
    check-keys: true

# vim: set ft=yaml:
EOF

            icat "ansible.cfg" <<'EOF'
[defaults]
default_transport = ssh
deprecation_warnings = false
executable = /bin/bash
force_valid_group_names = ignore
forks = 8
gather_subset = !hardware
host_key_checking = False
log_path = ./ansible.log
nocows = 1

# for submodules
library = some-submodule/library/:another-submodule/library/
roles_path = some-submodule/roles/:another-submodule/roles/

# if this file has its executable bit set, it will be executed and its stdout
# will be used, otherwise it will be read plaintext â†“
vault_password_file = ~/.vault.password
ask_vault_pass = false

# Use the YAML callback plugin for better structured log output
# https://docs.ansible.com/ansible/latest/collections/community/general/yaml_callback.html
stdout_callback = community.general.yaml
bin_ansible_callbacks = True

[ssh_connection]
control_path = %(directory)s/%%h-%%p-%%r
pipelining = True
EOF
        ;;
# }}}
        ansible-role) # {{{2
            mkdir -p "./defaults"
            icat "./defaults/main.yml" <<'EOF'
---
# Absolute path to the directory of the 'bash' bin
bash_bin_directory: null

# code: language=ansible
EOF

            mkdir -p "./handlers"
            icat "./handlers/main.yml" <<'EOF'
---
- name: Handler.Reload.wheres_my_bash.conf
  ansible.builtin.debug:
    msg: "Reloading consumers of 'wheres_my_bash.conf' ..."

# code: language=ansible
EOF

            mkdir -p "./tasks"
            icat "./tasks/main.yml" <<'EOF'
---
- name: Set platform/version specific variables
  ansible.builtin.include_vars: "{{ item }}"
  loop: "{{ paths | list | unique }}"
  vars:
    paths:
      - "{{ role_path }}/vars/default.yml"
      - "{{ role_path }}/vars/{{ ansible_facts['os_family'] }}.yml"
      - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}.yml"
      - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_major_version'] }}.yml"
      - "{{ role_path }}/vars/{{ ansible_facts['distribution'] }}_{{ ansible_facts['distribution_version'] }}.yml"
  when: item is file

- name: Assert mandatory variables
  ansible.builtin.assert:
    that:
      - bash_bin_directory != None

- name: Write majorly important '/etc/wheres_my_bash.conf' file
  ansible.builtin.template:
    src: ../templates/wheres_my_bash.conf.j2
    dest: /etc/wheres_my_bash.conf
  notify:
    - Handler.Reload.wheres_my_bash.conf

# code: language=ansible
EOF

            mkdir -p "./vars"

            mkdir -p "./templates"
            icat "./templates/wheres_my_bash.conf.j2" <<'EOF'
{{ ansible_managed | comment }}
[paths]
bash_directory = {{ bash_bin_directory }}
EOF

            mkdir -p "./meta"
            icat "./meta/main.yml" <<'EOF'
---
dependencies: []

galaxy_info:
  role_name: "@TODO"
  namespace: raf
  author: "@TODO"
  description: "@TODO"
  license: "license (MIT)"
  min_ansible_version: "2.10"

# code: language=ansible
EOF
        ;;
# }}}
        bazel) # {{{2
            icat ".bazeliskrc" <<'EOF'
USE_BAZEL_VERSION=6.2.0
EOF

            icat ".bazelrc" <<'EOF'
common --enable_bzlmod
EOF

            icat "BUILD.bazel" <<'EOF'
package(default_visibility = ["//visibility:public"])
# load("@rules_idtech3//:index.bzl", "idtech3_make_pk3")
load("@rules_pkg//:pkg.bzl", "pkg_zip")


genrule(
    name = "foo",
    srcs = ["foo.in"],
    outs = ["foo.out"],
    cmd = "./$(location build-foo.sh) $(SRCS) $@ > \"$@\"",
    tools = ["build-foo.sh"],
)

filegroup(
    name = "obj-runfiles",
    srcs = [
        "convert-blend-to-obj.py",
    ],
)

sh_binary(
    name = "convert-blend",
    srcs = ["convert-blend-to-obj.sh"],
    data = [
        "convert-blend-to-obj.py",
    ],
)
EOF

            icat "MODULE.bazel" <<'EOF'
module(
    name = "cool_local_project",
    version = "0.0.1",
)

# {{{ rules_pkg
bazel_dep(name = "rules_pkg", version = "0.9.1")

# {{{ rules_python
bazel_dep(name = "rules_python", version = "0.21.0")
EOF

            icat "WORKSPACE.bazel" <<'EOF'
# Empty file indicating the root of a Bazel workspace.
# Dependencies and setup are in ./MODULE.bazel.
EOF

            icat "index.bzl" <<'EOF'
load("@rules_pkg//:pkg.bzl", "pkg_zip")

def zipit(name, package_variables):
    pkg_zip(
        name = name,
        package_variables = package_variables,
    )


def _some_rule(ctx):
    cfg = ctx.attr.cfg[Idtech3ConfigProvider]

    # @TODO support multiple inputs
    input_file = ctx.attr.input.files.to_list()[0]
    texture_name = input_file.basename.rsplit(".", 1)[0]
    output_file = ctx.actions.declare_file(
        "textures/{}.{}".format(texture_name, ctx.attr.output_format)
    )

    jailbreak = ctx.attr._jailbreak.files.to_list()[0]

    args = ctx.actions.args()
    args.add_all(["magick", "convert", input_file])

    resize = ctx.attr.modifiers.get("resize","100%")
    if resize != "100%":
        args.add("-resize", resize)

    if ctx.attr.output_format == "jpg":
        args.add_all([
            "-quality", ctx.attr.modifiers.get("jpg_quality","100%"),
            "-interlace", "none", # non-progressive
        ])

    args.add(output_file)

    ctx.actions.run_shell(
        # executable = jailbreak,
        inputs = [input_file],
        outputs = [output_file],
        arguments = [],
        # tools = runfiles.files,
        command = "cat {} > {}".format(input_file.path, output_file.path),
        execution_requirements = { "no-sandbox": "1" },
    )

    return [
        DefaultInfo(
            files = depset([output_file]),
            # runfiles = ctx.runfiles(files = ctx.attr._jailbreak[DefaultInfo].default_runfiles.files.to_list()),
            # runfiles = ctx.runfiles(files = ctx.attr._jailbreak[DefaultInfo].files.to_list()),
        ),
        Idtech3ConfigProvider(
            imagemagick_path = cfg.imagemagick_path,
        ),
    ]

some_rule = rule(
    implementation = _some_rule,
    doc = "Some rule",
    attrs = {
        "input": attr.label(
            doc = "Input file",
            allow_single_file = True,
            providers = [Idtech3ConfigProvider],
            mandatory = True,
        ),
        "output_format": attr.string(
            default = "jpg",
            values = ["jpg", "tga"],
        ),
        "modifiers": attr.string_dict(),
        "_jailbreak": attr.label(
            default = "@rules_idtech3//tools:jailbreak",
            executable = True,
            cfg = "exec",
        ),
    },
)
EOF
        ;;
# }}}
        conda-env|conda-lock) # {{{2
            icat "environment.yml" <<'EOF'
name: MYPKG
channels:
  - conda-forge
  - anaconda
  - nodefaults
dependencies:
  - python=3.7
  - gcc>=10.0.0,<=11.0.0
  - pip:
    - requests==2.27.1
EOF
        ;;
# }}}
        build) # {{{2
            xicat "build.sh" <<'EOF'
#!/usr/bin/env bash
set -eo pipefail

# cd to parent dir of current script
cd "$(dirname "${BASH_SOURCE[0]}")"

set -x
EOF
        ;;
# }}}
        clean) # {{{2
            xicat "clean.sh" <<'EOF'
#!/usr/bin/env bash
set -eo pipefail

# cd to parent dir of current script
cd "$(dirname "${BASH_SOURCE[0]}")"
EOF
        ;;
# }}}
        cycle) # {{{2
            xicat "cycle.sh" <<'EOF'
#!/usr/bin/env bash
set -eo pipefail

parentd="$(dirname "${BASH_SOURCE[0]}")"

"${parentd}/build.sh"
"${parentd}/MY_BINARY_REPLACE_THIS" "$@"
EOF
        ;;
# }}}
        watch) # {{{2
            xicat "watch.sh" <<'EOF'
#!/usr/bin/env bash
set -eo pipefail

tmux-run 8<<WEOF
php -S localhost:8011
IGN=index.html watch-any './build.sh'
WEOF
EOF
        ;;
# }}}
        .editorconfig|editorconfig) # {{{2
            icat ".editorconfig" <<'EOF'
[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true

trim_trailing_whitespace = true
indent_style = space

[*.go]
indent_style = tab
indent_size = 4

[*.nim]
indent_size = 2

[*.py]
indent_size = 4

[*.{js,mjs,jsx,ts,tsx}]
indent_size = 2

[*.{c,cc,cpp,h,hh,hpp}]
indent_size = 3

[Makefile]
indent_style = tab
indent_size = 4
trim_trailing_whitespace = false

[meson.build]
indent_style = tab
indent_size = 4

# serialization & markup

[*.{json,jsonl,json5}]
indent_size = 2

[*.{yaml,yml}]
indent_size = 2

[*.xml]
indent_size = 2

[*.md]
indent_style = tab
trim_trailing_whitespace = false
EOF
        ;;
# }}}
        meson) # {{{2
            icat "meson.build" <<'EOF'
project(
	'cex',
	['c', 'cpp'],
	version: '0.0.1',
	license: 'GPL',
)


# subproject - lib: ./clib/meson.build
glib_dep = dependency('glib-2.0')

libclib_inc = include_directories('include')
libclib = static_library(
  'clib',
  files('src/clib.c'),
  include_directories: [libclib_inc],
  dependencies: [glib_dep],
)

clib_dep = declare_dependency(
  link_with: libclib,
  include_directories: libclib_inc,
)

# mainproject - exec
clib_proj = subproject('clib')
clib_dep = clib_proj.get_variable('clib_dep')

executable('cex',
	files(
      './src/main.c',
	),
	dependencies: [
      clib_dep,
	],
)
EOF
        ;;
# }}}
        mpv-debug) # {{{2
            icat "$HOME/.config/mpv/scripts/debug.lua" <<'EOF'
require 'mp'

# see
# https://mpv.io/manual/master/#properties
# https://mpv.io/manual/master/#list-of-events

local function debugprop(arg)
    local res = mp.get_property(arg)
    if res ~= nil then
        print(arg..": "..res)
    end
end

local function debughere()
    debugprop("video-format")
    debugprop("video")
    debugprop("path")
    debugprop("stream-path")
    debugprop("media-title")
    debugprop("filename")
    debugprop("file-size")
end

mp.register_event("file-loaded", debughere)
EOF
        ;;
# }}}
        mvn|maven) # {{{2
            icat "pom.xml" <<'EOF'
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.otto.neurath</groupId>
    <artifactId>otto-neurath</artifactId>
    <version>0.1-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>4.2.0</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
EOF
        ;;
# }}}
        jsconfig) # {{{2
            icat "jsconfig.json" <<'EOF'
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es6",
    "experimentalDecorators": true
  },
  "include": ["*"]
}
EOF
        ;;
# }}}
        dockerfile) # {{{2
            icat "Dockerfile" <<'EOF'
FROM debian:jessie
MAINTAINER My Self <myself@gmail.com>

COPY something/* /tmp/something

ENV SOMETHING_PATH /tmp/something
# default answers for all questions
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -qq && apt-get upgrade -y

RUN apt-get install --no-install-recommends -y \
        build-essential make pkg-config ca-certificates curl unzip python git-core cmake \

RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

USER someuser

# EXPOSE 8080

# VOLUME  ["/opt/whatever"]

# default cmd
CMD ["/usr/bin/bash", "-c", "echo \"ASD\""]

# vim: syntax=dockerfile
EOF
        ;;
# }}}
        docker-compose|dockercompose|compose) # {{{2
            icat "docker-compose.yml" <<'EOF'
version: '3.7'

services:
  jira:
    depends_on:
      - postgresql
    image: atlassian/jira-software
    networks:
      - jiranet
    volumes:
      - jiradata:/var/atlassian/application-data/jira
    ports:
      - '8080:8080'
    environment:
      - 'JIRA_DATABASE_URL=jdbc:postgresql://postgresql:5432/jiradb'
      - 'JIRA_DB_PASSWORD=bellyfish'
      - 'SETENV_JVM_MINIMUM_MEMORY=2048m'
      - 'SETENV_JVM_MAXIMUM_MEMORY=4096m'
      - 'JIRA_PROXY_NAME='
      - 'JIRA_PROXY_PORT='
      - 'JIRA_PROXY_SCHEME='
    logging:
      # limit logs retained on host to 25MB
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "50"

  postgresql:
    image: postgres:9.5-alpine
    networks:
      - jiranet
    volumes:
      - postgresqldata:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_USER=jira'
      - 'POSTGRES_PASSWORD=bellyfish'
      - 'POSTGRES_DB=jiradb'
      - 'POSTGRES_ENCODING=UNICODE'
      - 'POSTGRES_COLLATE=C'
      - 'POSTGRES_COLLATE_TYPE=C'
    logging:
      # limit logs retained on host to 25MB
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "50"

volumes:
  jiradata:
    # external specifies that this volume has been created outside of Compose. docker-compose up does not attempt to create it, and raises an error if it doesnâ€™t exist.
    external: false
  postgresqldata:
    external: false

networks:
  jiranet:
    driver: bridge
EOF
        ;;
# }}}
        clang-format) # {{{2
            icat ".clang-format" <<'EOF'
# clang-format 13

Language: Cpp
Standard: c++20

AccessModifierOffset: -4 #?
AlignAfterOpenBracket: AlwaysBreak
AlignArrayOfStructures: Left
AlignConsecutiveAssignments: false
AlignConsecutiveBitFields: false
AlignConsecutiveDeclarations: false
AlignConsecutiveMacros: true
AlignEscapedNewlines: DontAlign
AlignOperands: AlignAfterOperator
AlignTrailingComments: true
AllowAllArgumentsOnNextLine: true
AllowAllConstructorInitializersOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true
AllowShortBlocksOnASingleLine: Always
AllowShortCaseLabelsOnASingleLine: true
AllowShortEnumsOnASingleLine: false
AllowShortFunctionsOnASingleLine: Inline
AllowShortIfStatementsOnASingleLine: WithoutElse
AllowShortLambdasOnASingleLine: Inline
AllowShortLoopsOnASingleLine: false
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: true
AlwaysBreakTemplateDeclarations: Yes
BinPackArguments: true
BinPackParameters: false
BitFieldColonSpacing: Both
BraceWrapping:
 AfterCaseLabel: true
 AfterClass: true
 AfterControlStatement: Never
 AfterEnum: true
 AfterFunction: true
 AfterNamespace: true
 #AfterObjCDeclaration
 AfterStruct: true
 AfterUnion: true
 AfterExternBlock: true
 BeforeCatch: false
 BeforeElse: false
 BeforeLambdaBody: true
 BeforeWhile: false
 IndentBraces: false
 SplitEmptyFunction: true
 SplitEmptyRecord: true
 SplitEmptyNamespace: true
#BreakAfterJavaFieldAnnotations
BreakBeforeBinaryOperators: NonAssignment
BreakBeforeBraces: Custom
BreakBeforeConceptDeclarations: true
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeComma
BreakInheritanceList: BeforeComma
BreakStringLiterals: false
ColumnLimit: 0
CommentPragmas: '' #?
CompactNamespaces: false
ConstructorInitializerAllOnOneLineOrOnePerLine: true
ConstructorInitializerIndentWidth: 4 #?
ContinuationIndentWidth: 4 #?
Cpp11BracedListStyle: true
DeriveLineEnding: true
DerivePointerAlignment: false
EmptyLineAfterAccessModifier: Leave
EmptyLineBeforeAccessModifier: Leave
FixNamespaceComments: true
ForEachMacros: []
IfMacros: ['MPT_MAYBE_CONSTANT_IF']
IncludeBlocks: Preserve
IncludeCategories: [] #?
IncludeIsMainRegex: '' #?
IncludeIsMainSourceRegex: '' #?
IndentAccessModifiers: false
IndentCaseBlocks: true
IndentCaseLabels: true
IndentExternBlock: NoIndent
IndentGotoLabels: false
IndentPPDirectives: None
#IndentRequiresClause: true
#BeforeHash
IndentWidth: 4
IndentWrappedFunctionNames: true
InsertTrailingCommas: None
#JavaImportGroups
#JavaScriptQuotes
#JavaScriptWrapImports
KeepEmptyLinesAtTheStartOfBlocks: true
LambdaBodyIndentation: OuterScope
MacroBlockBegin: '^MPT_TEST_GROUP_BEGIN|BEGIN_MESSAGE_MAP$' #?
MacroBlockEnd: '^MPT_TEST_GROUP_END|END_MESSAGE_MAP$' #?
MaxEmptyLinesToKeep: 5
NamespaceIndentation: None
NamespaceMacros: [] #?
#ObjCBinPackProtocolList
#ObjCBlockIndentWidth
#ObjCBreakBeforeNestedBlockParam
#ObjCSpaceAfterProperty
#ObjCSpaceBeforeProtocolList
PackConstructorInitializers: Never
#PenaltyBreakAssignment
#PenaltyBreakBeforeFirstCallParameter
#PenaltyBreakComment
#PenaltyBreakFirstLessLess
#PenaltyBreakOpenParenthesis
#PenaltyBreakString
#PenaltyBreakTemplateDeclaration
#PenaltyExcessCharacter
#PenaltyIndentedWhitespace
#PenaltyReturnTypeOnItsOwnLine
PointerAlignment: Right
PPIndentWidth: -1
QualifierAlignment: Leave
#QualifierOrder: ['static', 'inline', 'constexpr', 'volatile', 'const', 'restrict', 'type']
#RawStringFormats
ReferenceAlignment: Pointer
ReflowComments: false
RemoveBracesLLVM: false
SeparateDefinitionBlocks: Leave
ShortNamespaceLines: 1
SortIncludes: false
#SortJavaStaticImport
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Default
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
# SpaceBeforeParens: Never
SpaceBeforeParens: ControlStatements
SpaceBeforeParensOptions:
  AfterControlStatements: false
  AfterForeachMacros: false
  AfterFunctionDeclarationName: false
  AfterFunctionDefinitionName: false
  AfterIfMacros: false
  AfterOverloadedOperator: false
  #AfterRequiresInClause: false
  #AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 2
SpacesInAngles: false
SpacesInCStyleCastParentheses: false
SpacesInConditionalStatement: false
SpacesInContainerLiterals: false
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
SpacesInParentheses: false
SpacesInSquareBrackets: false
StatementAttributeLikeMacros: []
StatementMacros: [ 'OPENMPT_NAMESPACE_BEGIN', 'OPENMPT_NAMESPACE_END', 'MPT_MSVC_WORKAROUND_LNK4221', 'MPT_WARNING', 'MPT_TEST_GROUP_INLINE_IDENTIFIER', 'MPT_TEST_GROUP_INLINE', 'MPT_TEST_GROUP_STATIC' ] #?
TabWidth: 4
TypenameMacros: [] #?
UseCRLF: false
UseTab: ForContinuationAndIndentation
WhitespaceSensitiveMacros:
  - MPT_PP_STRINGIFY
EOF
        ;;
# }}}
        make|makefile|Makefile) # {{{2
            icat "Makefile" <<'EOF'
.PHONY: *
SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eo pipefail -c
.SILENT:

VERSION :=
SOME_ENV_VAR := ${SOME_ENV_VAR}

help:
	awk 'BEGIN {FS = ":.*##"; printf "Usage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-30s\033[0m %s\n", $$1, $$2 } /^# \{\{\{/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 7) } ' $(MAKEFILE_LIST)

# {{{ Build
build: ## build
	echo building...

PHONY:
.PHONY: PHONY
EOF
            ;;
# }}}
        pixi) # {{{2
            icat "pixi.toml" <<'EOF'
[project]
name = "projectname"
authors = ["Projectname Team"]
version = "0.0.0"
channels = [
    "conda-forge",
]

platforms = ["linux-64", "osx-64", "win-64"]

[tasks]
"test" = { cmd = ["python", "./test.py"] }

[dependencies]
"python" = "*"
"git" = "*"

[pypi-dependencies]
kas = "~=4.8.1"

[feature.build.tasks]
build = { cmd = ["cmake", "-S", ".", "-B", "build"]}
[feature.build.dependencies]
"python-clang" = "20.1.5.*"

[feature.build.target.linux-arm64.dependencies]
"gcc" = "*"
[feature.build.target.osx-64.dependencies]
"clang" = "*"
[feature.build.target.win-64.dependencies]
"clang" = "*"

[environments]
build = ["build"]
EOF
            ;;
    # }}}
        task|Taskfile) # {{{2
            icat "Taskfile.yml" <<'EOF'
version: '3'

anchor_build: &anchor_build
  deps: []
  sources:
    - ./Taskfile.yml
    - ./**/*
  env:
    SOME_VAR: 0
vars:
  build_tool_bin: './build_tool/build_tool{{- if eq OS "windows" }}.exe{{ end -}}'
includes:
  subproject:
    taskfile: ./subproject/
    dir: ./subproject/

tasks:
  build:
    <<: *anchor_build
    deps: []
    sources:
      - ./src/**/*
      - ./pom.xml
      - ./pixi.*
    generates:
      - ./target/**/*
    cmds:
      - task: subdir:build
      - mvn clean package {{.CLI_ARGS}}
EOF
            ;;
    # }}}
        github-actions) # {{{2
            icat ".github/workflows/ci.yml" <<'EOF'
name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]

# cancel previous unfinished/running jobs in each separate branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pre-build
        shell: bash
        run: ./pre-build.sh

      - uses: prefix-dev/setup-pixi@v0.8.3
        with:
          pixi-version: v0.41.4
          cache: true

      - name: Run build
        run: pixi run build
EOF
            ;;
    # }}}
    *)
    usage_and_die "ERROR: unknown template $1"
        ;;
    esac

# {{{1 pair ft-templates
elif [[ $# -eq 2 ]]; then
    case $2 in # template
        sh|bash|.sh) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env bash
set -eo pipefail

EOF
            ;;
    # }}}
        ts-deno|deno) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env -S deno run -A
async function main(args) {
    console.log(args);
    return 0;
}

if (import.meta.main) {
    Deno.exit(await main(Deno.args));
}

// vim: set ft=typescript:
EOF
            ;;
    # }}}
        js|javascript|node) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env node
function main(args) {
    console.log(`hello world! I see you passed me ${args}, how nice of you!`);
    return 0;
}

if (typeof require !== 'undefined' && require.main === module) {
    process.exitCode = main(process.argv.slice(2));
}
EOF
            ;;
    # }}}
        mjs) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env node
function main(args) {
    console.log(`hello world! I see you passed me ${args}, how nice of you!`);
    return 0;
}

if (import.meta.url === `file://${process.argv[1]}`) {
    process.exitCode = main(process.argv.slice(2));
}
EOF
            ;;
    # }}}
        py|python|.py) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env python3
import sys

def main():
    pass

if __name__ == "__main__":
    main()
EOF
            ;;
        lua) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env luajit
local arg = arg or { ... }
local function main()
    local help_text = [[
Usage: MOOP <filename>
       MOOP -
       MOOP -h | --help
]]

    local filename = arg[1]

    if not filename then
        io.stderr:write(help_text)
        os.exit(1)
    end

    if filename == "-h" or filename == "--help" then
        io.write(help_text)
        os.exit(0)
    end

    local content
    if filename == "-" then
        content = io.read("*a")
    else
        local file, err = io.open(filename, "rb")
        if not file then
            io.stderr:write("Error opening file: " .. err .. "\n")
            os.exit(1)
        end
        content = file:read("*a")
        file:close()
    end

    main(content)
end

main()
EOF
            ;;
    # }}}
        nosh) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env nosh
EOF
            ;;
    # }}}
        nu|nush|nushell) # {{{2
            xicat "$1" <<'EOF'
#!/usr/bin/env nu

def --env main [
    --arg1 = "1st",
    --arg2 = false,
] {
    print $"First argument:\n($arg1)"
    (
        print
        "Second argument:"
        $arg2
    )
}
EOF
            ;;
    # }}}
        got|go-test) # {{{2
            xicat "$1" <<'EOF'
package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSomething(t *testing.T) {
	var a string = "Hello"
	var b string = "Hello"

	assert.Equal(t, a, b, "The two words should be the same.")
}
EOF
            ;;
    # }}}
        pixi-wrapper) # {{{2
            xicat "$1" <<'EOF'
#!/bin/sh
pixi run --manifest-path "$(dirname "$(readlink "$0")")" python "$(readlink "$0").py" "$@"
EOF
            ;;
    # }}}
    *)
    usage_and_die "ERROR: unknown ft-template $2"
        ;;
    esac
    :
else
    usage
fi

if [[ ${#writtenFiles[@]} -gt 0 ]]; then
    "$EDITOR" + "${writtenFiles[@]}"
fi
