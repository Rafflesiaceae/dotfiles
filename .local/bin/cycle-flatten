#!/usr/bin/env bash
set -eo pipefail

# set -x
out=/tmp/query

usage() {
    echo "usage: [-h|--help] [-ns|--nosource] [-e|--edit] <file>"
    exit "${1:-1}"
}
nosource=
edit=
while :; do
    case $1 in
    -h | -\? | --help)
        usage 0
        ;;
    -ns | --nosource)
        nosource=1
        ;;
    -e | --edit)
        edit=1
        ;;
    --)
        shift || usage
        break
        ;;
    -?*)
        printf 'ERROR: Unknown option: %s\n' "$1" >&2
        usage
        ;;
    *) break ;;
    esac

    shift || usage
done

commitmessagef=wip-commit-message
rm -f "$commitmessagef"

failedf=/tmp/query-failed
rm -f "$failedf"

{
    if [[ ! "$nosource" ]]; then
        echo "> Flattening..." >/dev/tty
        echo "This is a flattened filetree represented as a YAML:"
        echo ""
        echo '```'
        flatten -o
        echo '```'
        echo ""
    else

        cat <<'EOF'
This is an example flattened filetree represented as a YAML - use this as output format:

```
src/mysource.py:
    perm: "0644"
    content: |
        #!/usr/bin/env python3
        import sys

        print("hello world")
src/run.sh:
    perm: "0755"
    content: |
        #!/usr/bin/env bash
        set -eo pipefail
        python ./src/mysource.py

# ...
```

EOF
    fi

    echo "> Build..." >/dev/tty
    if build >/tmp/query-build 2>&1; then
        echo "> Tests..." >/dev/tty
        if ! tests >/tmp/query-tests 2>&1; then
            echo "> ... Tests Failed" >/dev/tty
            echo "Tests Failed:"
            echo ""
            echo '```'
            cat "/tmp/query-tests"
            echo '```'
            # echo ""
            # echo "Implement what is required to fix the failing tests and output it in the same flattened filetree YAML structure as was provided before."
            # echo 'Add additional debug prints in case they are necessary to confirm the fixes.'
            # echo ""
            # echo "If files are not changed don't output them."
            touch "$failedf"
        fi
    else
        echo "> ... Build Failed" >/dev/tty
        echo "Build Failed:"
        echo ""
        echo '```'
        cat "/tmp/query-build"
        echo '```'
        # echo ""
        # echo "Implement what is required to fix the build and output it in the same flattened filetree YAML structure as was provided before."
        # echo 'Add additional debug prints in case they are necessary to confirm the fixes.'
        # echo ""
        # echo "If files are not changed don't output them."
        touch "$failedf"
    fi
    if [[ "$edit" ]]; then
        echo "TODO"
        # echo ""
        # echo "Implement what is required to fix the build and output it in the same flattened filetree YAML structure as was provided before."
        # echo 'Add additional debug prints in case they are necessary to confirm the fixes.'
    fi
    echo ""
    echo "Implement what is required to fix this and output it in the same flattened filetree YAML structure as was provided before."
    echo 'Add additional debug prints in case they are necessary to confirm the fixes.'
    echo ""
    echo "If files are not changed don't output them."
    echo ""
    echo "Also add a new file to the filetree named: ${commitmessagef}"
    echo 'Inside, write a git commit body - the title max being 50 characters (starting with 'CGPT: ') and the body description 640 characters at most (wrapped at 80 characters per line).'
    echo 'Concisely describe what the issue was that you tried to fix and how you attempt to fix it.'
} >"$out"
# } | tee "$out"

if [[ "$edit" ]] || [[ -e "$failedf" ]]; then
    if [[ "$edit" ]]; then
        vim + "$out"
    fi

    if [[ ! -s "$out" ]] || ! grep -q '[^[:space:]]' "$out"; then
        echo "Empty file, aborting..."
        exit 1
    fi

    cb -i <"$out"
    echo "Copied '$out' to clipboard!"
    echo "Now paste it to ChatGPT and wait for the result."

    wait-for-enter "after you have copied the result to your clipboard"

    expando
fi
