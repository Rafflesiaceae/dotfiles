#!/usr/bin/env bash
set -eo pipefail

# set -x
out=/tmp/chatgpt-query

gitws=$(git rev-parse --show-toplevel 2>/dev/null || true)

# {{{1 CLI
usage() {
    echo "usage: [-h|--help] [-nb|--nobuild] [-nc|--nocommit] [-ns|--nosource] [-e|--edit] <file>"
    exit "${1:-1}"
}
nobuild=
nocommit=
nosource=
notest=
edit=
while :; do
    case $1 in
    -h | -\? | --help)
        usage 0
        ;;
    -nb | --nobuild)
        nobuild=1
        ;;
    -nc | --nocommit)
        nocommit=1
        ;;
    -ns | --nosource)
        nosource=1
        ;;
    -nt | --notest)
        # TODO
        notest=1
        ;;
    -e | --edit)
        edit=1
        ;;
    --)
        shift || usage
        break
        ;;
    -?*)
        printf 'ERROR: Unknown option: %s\n' "$1" >&2
        usage
        ;;
    *) break ;;
    esac

    shift || usage
done

# {{{1 Main

commitmessagef=wip-commit-message
rm -f "$commitmessagef"

failedf=/tmp/query-failed
rm -f "$failedf"

single_cycle() {
    {
        printf "┏━━━━━━━━━━━━━━━━━━┓\n┗" >/dev/tty
        if [[ ! "$nosource" ]]; then
            printf "Flatten " >/dev/tty
            echo "This is a flattened filetree represented as a YAML:"
            echo ""
            echo '```'
            flatten
            echo '```'
            echo ""
            printf "✓ " >/dev/tty

            # print last 20 git commit titles
            if [[ "$gitws" ]]; then
                echo "Last 20 git commit titles:"
                echo ""
                echo '```'
                git log -n 20 --pretty=format:%s
                echo ""
                echo '```'
                echo ""
            fi
        else

            cat <<'EOF'
This is an example flattened filetree represented as a YAML - use this as output format:

```
src/mysource.py:
    perm: "0644"
    content: |
        #!/usr/bin/env python3
        import sys

        print("hello world")
src/run.sh:
    perm: "0755"
    content: |
        #!/usr/bin/env bash
        set -eo pipefail
        python ./src/mysource.py

# ...
```

EOF
        fi

        if [[ ! "$nobuild" ]]; then
            printf "Build " >/dev/tty
            if build >/tmp/query-build 2>&1; then
                printf "✓ " >/dev/tty
                printf "Tests " >/dev/tty
                if ! tests >/tmp/query-tests 2>&1; then
                    printf "✘ " >/dev/tty
                    echo "Tests Failed:"
                    echo ""
                    echo '```'
                    cat "/tmp/query-tests"
                    echo '```'
                    echo ""

                    touch "$failedf"
                else
                    printf "✓ " >/dev/tty
                fi
            else
                printf "✘ " >/dev/tty
                echo "Build Failed:"
                echo ""
                echo '```'
                cat "/tmp/query-build"
                echo '```'
                echo ""

                touch "$failedf"
            fi
        fi

        if [[ "$edit" ]]; then
            echo "TODO"
            echo ""
        fi

        if [[ "$gitws" ]] && [[ -e "${gitws}/chatgpt-query-additional" ]]; then
            echo ""
            cat "${gitws}/chatgpt-query-additional"
            echo ""
        fi

        echo 'Add additional debug prints in case they are necessary to confirm the fixes.'
        echo "Implement what is required to fix this and return a single fenced yaml code block with only the changed files and no extra text."
        echo ""
        echo "If files are not changed don't output them."
        echo ""
        echo "Also add a new file to the filetree named: ${commitmessagef}"
        echo 'Inside, write a git commit body - the title max being 50 characters (starting with 'CGPT: ') and the body description 640 characters at most (wrapped at 80 characters per line).'
        echo 'Concisely describe what the issue was that you tried to fix and how you attempt to fix it.'

        printf "\n" >/dev/tty
    } >"$out"

    # Check ChatGPT limits
    if ! limits=$(chatgpt-check-limits <"$out"); then
        notify-send --urgency=critical "[cycle-flatten]" "$limits"
    else
        # printf "CGPT Limits: %s\n" "${limits}" >&2
        :
    fi

    if [[ "$edit" ]] || [[ -e "$failedf" ]]; then
        if [[ "$edit" ]]; then
            vim + "$out"
        fi

        if [[ ! -s "$out" ]] || ! grep -q '[^[:space:]]' "$out"; then
            echo "Empty file, aborting..."
            exit 1
        fi

        cp "$out" "${out}.$(date -u +"%Y-%m-%dT%H-%M-%SZ")"
        cb -i <"$out"

        wait-for-enter "Copied to clipboard. Press Enter after you have the response of ChatGPT in your Clipboard..."

        if [[ "$nocommit" ]]; then
            expando --nocommit
        else
            expando
        fi

        if [[ -e "$failedf" ]]; then
            return 1
        elif [[ "$edit" ]]; then
            exit 0
        fi
    fi
}

while ! single_cycle; do :; done
