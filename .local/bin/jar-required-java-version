#!/usr/bin/env bash
set -eo pipefail

# Usage: ./required_java_version.sh yourfile.jar

# set -x
JAR_FILE="$1"

if [[ -z "$JAR_FILE" || ! -f "$JAR_FILE" ]]; then
	echo "Usage: $0 yourfile.jar"
	exit 1
fi

TMPDIR=$(mktemp -d)

# Extract all .class files from the JAR
unzip -q "$JAR_FILE" '*.class' -d "$TMPDIR"

# Extract major versions from all .class files using javap
VERSIONS=$(find "$TMPDIR" -name '*.class' -exec javap -verbose {} + 2>/dev/null | grep 'major version' | awk '{print $3}')

rm -rf "$TMPDIR"

if [[ -z "$VERSIONS" ]]; then
	echo "Could not determine class versions."
	exit 1
fi

MAX_VERSION=$(echo "$VERSIONS" | sort -nr | head -1) || true

# Map class file version to Java version
case "$MAX_VERSION" in
45) JAVA_VER="1.1" ;;
46) JAVA_VER="1.2" ;;
47) JAVA_VER="1.3" ;;
48) JAVA_VER="1.4" ;;
49) JAVA_VER="5" ;;
50) JAVA_VER="6" ;;
51) JAVA_VER="7" ;;
52) JAVA_VER="8" ;;
53) JAVA_VER="9" ;;
54) JAVA_VER="10" ;;
55) JAVA_VER="11" ;;
56) JAVA_VER="12" ;;
57) JAVA_VER="13" ;;
58) JAVA_VER="14" ;;
59) JAVA_VER="15" ;;
60) JAVA_VER="16" ;;
61) JAVA_VER="17" ;;
62) JAVA_VER="18" ;;
63) JAVA_VER="19" ;;
64) JAVA_VER="20" ;;
65) JAVA_VER="21" ;;
66) JAVA_VER="22" ;;
*) JAVA_VER="Unknown" ;;
esac

echo "Requires: Java $JAVA_VER (class version $MAX_VERSION)"
