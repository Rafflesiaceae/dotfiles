#!/usr/bin/env python3
from io import StringIO
from typing import *
from typing.io import *
import shutil
import subprocess
import sys
import tempfile

# @XXX @NOTE: we don't support all possible cases of weird filenames, as
# ripgrep doesn't do any escaping, if you have ':[0-9]+:' as part of any
# filename, we will break for sure
#
# once https://github.com/BurntSushi/ripgrep/issues/1872 goes through we
# can swap over to parsing the '--json' output and then this issue will be
# fixed

import re
re_number_sep = re.compile(r':([0-9]+):')

def main():
    if sys.stdin.isatty(): # we invoke ripgrep
        args=sys.argv[1:]

        if len(args) == 0 or any(a in ["-h","--help"] for a in args):
            print("""
                  I turn ripgrep into a search-and-replace kinda deal, do
                  you know ripgrep's -r/--replace ? it's a cool thing, but
                  it doesnt edit files in place, ripgrep is intended by
                  the author to never ever change your files, so instead I
                  am here

                  do like a normal rg with -r to get the result that you
                  want and then just prefix me to the whole shell command,
                  I'll do the rest, you can also pass me the stdout of an
                  rg command as long as it's piped, but I expect a
                  specific format from ripgrep, check 'clean_args' in my
                  source if you want to do that, I'll also add them to the
                  last example

                  have a nice day

                  examples:
                      ripsed rg "foobar-(.*)" -r "foo-\${1}" -g '!**.*sh'
                      ripsed "foobar-(.*)" -r "foo-\${1}" -g '!**.*sh'

                      rg "foobar-(.*)" -r "foo-\${1}" -g '!**.*sh' \\
                          --color never --context 0 --line-number \\
                          --max-columns 0 --no-column | ripsed
                  """)
            sys.exit(0)

        if args[0] == 'rg':
            args.pop(0)

        # we overwrite potential rg arguments in order to get deterministic output 
        clean_args = [
            "--color", "never",
            "--context", "0",
            "--line-number",
            "--max-columns", "0",
            "--no-column",
        ]

        rg_out = subprocess.check_output([ "rg", *args, *clean_args ]).decode("utf-8").splitlines(True)
    else: # we use ripgrep output from stdin
        # @NOTE: this requires you to use proper rg arguments yourself, see 'clean_args' above
        rg_out=sys.stdin.readlines()

    queue: List[any] = []
    entry_i_line_number=0
    entry_i_newtext=1
    buckets: Dict[str, List[any]] = {} # path => entry

    # parse output and fill into buckets
    for line in rg_out:
        number_seperator=next(re_number_sep.finditer(line))

        line_number = int(number_seperator.groups()[0])
        span        = number_seperator.span()

        path    = line[:span[0]]
        newtext = line[span[1]:]

        entry = [ line_number, newtext ]

        if path in buckets:
            buckets[path].append(entry)
        else:
            buckets[path] = [entry]

    # rewrite files with changes
    for path,entries in buckets.items():
        with tempfile.NamedTemporaryFile(mode='w+', delete=False) as temp_file:
            i = 0
            ei = 0
            entry = entries[ei]
            with open(path) as input_file:
                for line in input_file:
                    if i == entry[entry_i_line_number]-1:
                        temp_file.write(entry[entry_i_newtext])
                        ei+=1
                        if ei < len(entries): entry = entries[ei]
                    else:
                        temp_file.write(line)
                    i+=1

            temp_file.flush()
            shutil.move(temp_file.name, path)

if __name__ == "__main__":
    main()
